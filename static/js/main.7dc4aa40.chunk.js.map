{"version":3,"sources":["components/Item/Item.js","components/AddItem/AddItem.js","containers/Items.js","store/actions.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["item","props","clicked","itemName","price","className","onClick","AddItem","itemAdded","useState","setItemName","setPrice","type","placeholder","onChange","event","target","value","connect","state","items","dispatch","onAddedItem","payload","onRemovedItem","id","itemId","map","key","App","Boolean","window","location","hostname","match","initialState","reducer","action","newItem","Date","valueOf","concat","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAgBeA,G,MAbF,SAAAC,GAAU,IAEXC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MAE3B,OACI,yBAAKC,UAAU,QACX,4BAAKF,GACL,+BAAKC,GACL,4BAAQC,UAAU,aAAaC,QAASJ,GAAxC,a,OC4BGK,G,MApCC,SAAAN,GAAU,IAEdO,EAAcP,EAAdO,UAFa,EAGWC,mBAAS,IAHpB,mBAGdN,EAHc,KAGJO,EAHI,OAIKD,mBAAS,IAJd,mBAIdL,EAJc,KAIPO,EAJO,KAiBrB,OACI,yBAAKN,UAAU,YACX,2BACIO,KAAK,OACLC,YAAY,OACZC,SAhBmB,SAACC,GAC5BL,EAAYK,EAAMC,OAAOC,QAgBjBA,MAAOd,IACX,2BACIS,KAAK,SACLC,YAAY,QACZC,SAlBgB,SAACC,GACzBJ,EAASI,EAAMC,OAAOC,QAkBdA,MAAOb,IACX,4BAAQC,UAAU,UAAUC,QAAS,kBAAMH,GAAsB,KAAVC,EAAeI,EAAUL,EAAUC,GAAS,OAAnG,YACCD,GAAsB,KAAVC,EAAe,4BAAQC,UAAU,YAAYC,QAlB9C,WAChBI,EAAY,IACZC,EAAS,MAgBuB,SAAqE,QCI9FO,eAbS,SAAAC,GACpB,MAAO,CACHC,MAAOD,EAAMC,UAIM,SAAAC,GACvB,MAAO,CACHC,YAAa,SAACnB,EAAUC,GAAX,OAAqBiB,EAAS,CAAET,KChC7B,WDgCyDW,QAAS,CAAEpB,SAAUA,EAAUC,MAAOA,MAC/GoB,cAAe,SAACC,GAAD,OAAQJ,EAAS,CAAET,KChCf,cDgC8Cc,OAAQD,QAIlEP,EA/BD,SAAAjB,GAAU,IAEZqB,EAAsCrB,EAAtCqB,YAAaF,EAAyBnB,EAAzBmB,MAAOI,EAAkBvB,EAAlBuB,cAE5B,OACI,6BACI,kBAAC,EAAD,CAAShB,UAAWc,IACnBF,EAAMO,KAAI,SAAA3B,GAAI,OACX,kBAAC,EAAD,CACI4B,IAAK5B,EAAKyB,GACVtB,SAAUH,EAAKG,SACfC,MAAOJ,EAAKI,MACZF,QAAS,kBAAMsB,EAAcxB,EAAKyB,cEPvCI,EARH,WACV,OACE,oCACE,kBAAC,EAAD,Q,MCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CACjBf,MAAO,IAwBIgB,EArBC,WAAmC,IAAlCjB,EAAiC,uDAAzBgB,EAAcE,EAAW,uCAC9C,OAAQA,EAAOzB,MACX,IHRgB,WGSZ,IAAM0B,EAAU,CACZb,IAAI,IAAIc,MAAOC,UACfrC,SAAUkC,EAAOd,QAAQpB,SACzBC,MAAOiC,EAAOd,QAAQnB,OAE1B,OAAO,2BACAe,GADP,IAEIC,MAAOD,EAAMC,MAAMqB,OAAOH,KAElC,IHjBmB,cGkBf,OAAO,2BACAnB,GADP,IAEIC,MAAOD,EAAMC,MAAMsB,QAAO,SAAA1C,GAAI,OAAIA,EAAKyB,KAAOY,EAAOX,YAGjE,OAAOP,GCfLwB,EAAQC,YAAYR,GAE1BS,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7dc4aa40.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Item.css';\r\n\r\nconst item = props => {\r\n\r\n    const { clicked, itemName, price } = props;\r\n    \r\n    return (\r\n        <div className=\"item\">\r\n            <h1>{itemName}</h1>\r\n            <p>${price}</p>\r\n            <button className='delete-btn' onClick={clicked}>Delete</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default item;","import React, { useState } from 'react';\r\nimport './AddItem.css';\r\n\r\nconst AddItem = props => {\r\n\r\n    const { itemAdded } = props;\r\n    const [itemName, setItemName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n\r\n    const itemNameChangedHandler = (event) => {\r\n        setItemName(event.target.value);\r\n    }\r\n    const priceChangedHandler = (event) => {\r\n        setPrice(event.target.value);\r\n    }\r\n    const clearInputs = () => {\r\n        setItemName('');\r\n        setPrice('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-item\">\r\n            <input\r\n                type='text'\r\n                placeholder='Item'\r\n                onChange={itemNameChangedHandler}\r\n                value={itemName} />\r\n            <input\r\n                type='number'\r\n                placeholder='Price'\r\n                onChange={priceChangedHandler}\r\n                value={price} />\r\n            <button className='add-btn' onClick={() => itemName && price !== '' ? itemAdded(itemName, price) : null}>Add Item</button>\r\n            {itemName || price !== '' ? <button className='clear-btn' onClick={clearInputs}>Clear</button> : null}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddItem;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Item from '../components/Item/Item';\r\nimport AddItem from '../components/AddItem/AddItem';\r\nimport * as actionTypes from '../store/actions';\r\n\r\nconst Items = props => {\r\n\r\n    const { onAddedItem, items, onRemovedItem } = props;\r\n\r\n    return (\r\n        <div>\r\n            <AddItem itemAdded={onAddedItem} />\r\n            {items.map(item => (\r\n                <Item\r\n                    key={item.id}\r\n                    itemName={item.itemName}\r\n                    price={item.price}\r\n                    clicked={() => onRemovedItem(item.id)} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        items: state.items\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAddedItem: (itemName, price) => dispatch({ type: actionTypes.ADD_ITEM, payload: { itemName: itemName, price: price } }),\r\n        onRemovedItem: (id) => dispatch({ type: actionTypes.REMOVE_ITEM, itemId: id })\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Items);","export const ADD_ITEM = 'ADD_ITEM';\r\nexport const REMOVE_ITEM = 'REMOVE_ITEM';","import React from 'react';\nimport Items from './containers/Items';\n\nconst App = () => {\n  return (\n    <>\n      <Items />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions';\r\n\r\nconst initialState = {\r\n    items: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_ITEM:\r\n            const newItem = {\r\n                id: new Date().valueOf(),\r\n                itemName: action.payload.itemName,\r\n                price: action.payload.price\r\n            }\r\n            return {\r\n                ...state,\r\n                items: state.items.concat(newItem)\r\n            }\r\n        case actionTypes.REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item.id !== action.itemId)\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}